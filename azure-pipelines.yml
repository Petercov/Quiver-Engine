schedules:
  - cron: "20 4 * * Sun"
    displayName: "Weekly Auto Build"
    branches:
      include:
      - master
      - upcoming
      - 64bit
      - dx11
      - posix-support
    always: "false" # Don't run unless changes happen


pool:
  vmImage: 'windows-2019'


# useful pages:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/run-number?view=azure-devops&tabs=yaml
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml


steps:
- task: ado-discord-webhook@1
  inputs:
    channelId: '$(DiscordWebhookURL)'
    webhookKey: '$(DiscordWebhookKey)'
    name: 'quiver azure pipelines'
    messageType: 'content'
    content: 'Build $(Build.BuildId) on $(Build.SourceBranchName) branch started'


- script: |
    py -m pip install --upgrade pip
    py -m pip install lxml
  displayName: 'Install lxml'

- task: CmdLine@2
  inputs:
    script: 'py devtools/qpc/qpc.py -b "_qpc_scripts/_default.qpc_base" -a everything -r physics -m EPISODIC HL2 HL2MP -g visual_studio -mf everything'
    workingDirectory: 'src/'
    
# no difference from MSBuild@1?
- task: VSBuild@1
  displayName: Build Projects
  inputs:
    solution: 'src\everything.sln'
    platform: 'win32'
    configuration: 'Release'
    maximumCpuCount: true
    createLogFile: true
    logFileVerbosity: 'minimal'

# check the log to see if the build failed, if it did, then send a webhook saying it failed
- task: ado-discord-webhook@1
  condition: failed()
  inputs:
    channelId: '$(DiscordWebhookURL)'
    webhookKey: '$(DiscordWebhookKey)'
    name: 'quiver azure pipelines'
    messageType: 'content'
    content: 'Build $(Build.BuildId) on $(Build.SourceBranchName) branch FAILED'

- task: ArchiveFiles@2
  displayName: Compress game folder with 7z
  inputs:
    rootFolderOrFile: 'game/'
    includeRootFolder: false
    archiveType: '7z'
    archiveFile: 'QuiverSource_$(Build.BuildId)_$(Build.SourceBranchName)_$(Date:yyyyMMdd).7z'
    replaceExistingArchive: true

- task: GitHubRelease@0
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Release to GitHub
  inputs:
    gitHubConnection: 'quiverteam'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'manual'
    tag: 'auto_build_$(Build.BuildId)_$(Build.SourceBranchName)'
    # releaseNotesSource: 'input'
    isPreRelease: false
    releaseNotes: "Auto Build on $(Build.Repository.Name) branch, on $(Date:yyyy-MM-dd) $(Hours):$(Minutes)"
    title: 'Auto Build $(Build.BuildId) - $(Build.SourceBranchName)'
    assets: |
      QuiverSource_$(Build.BuildId)_$(Build.SourceBranchName)_$(Date:yyyyMMdd).7z
      
- task: GitHubRelease@0
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Release to GitHub
  inputs:
    gitHubConnection: 'quiverteam'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'manual'
    tag: 'auto_build_$(Build.BuildId)_$(Build.SourceBranchName)'
    # releaseNotesSource: 'input'
    isPreRelease: true
    releaseNotes: "Auto Build on $(Build.Repository.Name) branch, on $(Date:yyyy-MM-dd) $(Hours):$(Minutes)"
    title: 'Auto Build $(Build.BuildId) - $(Build.SourceBranchName)'
    assets: |
      QuiverSource_$(Build.BuildId)_$(Build.SourceBranchName)_$(Date:yyyyMMdd).7z
